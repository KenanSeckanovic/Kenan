# Copyright (C) 2016 - present Juergen Zimmermann, Hochschule Karlsruhe
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

---
# ==============================================================================
# K e y c l o a k
# ==============================================================================

# https://github.com/ch4mpy/spring-addons/blob/master/spring-addons-starter-oidc/README.MD
# https://stackoverflow.com/questions/74571191/use-keycloak-spring-adapter-with-spring-boot-3#answer-74572732
# https://github.com/ch4mpy/spring-addons/tree/master/samples/tutorials
# com.c4_soft.springaddons.security.oidc.starter.properties.SpringAddonsOidcProperties
#com.c4-soft.springaddons.oidc:
#  ops:
#    # "iss" ist Praefix fuer ".../.well-known/openid-configuration"
#    - iss: ${app.keycloak.issuer-uri}
#      username-claim: preferred_username
#      authorities:
#        # Pfad zu den Rollen innerhalb vom "JWT Claim" und zusaetzlicher Praefix "ROLE_" fuer Spring Security
#        - path: $.realm_access.roles
#          #prefix: ROLE_
#        - path: $.resource_access.*.roles
#          prefix: ROLE_

  # com.c4_soft.springaddons.security.oidc.starter.properties.SpringAddonsOidcResourceServerProperties
  # in com.c4-soft.springaddons:spring-addons-starter-oidc
#  resourceserver.permit-all:
#    - /api/**
#    - /auth/*
#    - /graphql
#    - /error
#    # TODO Nur im Profile "dev" ohne Zugriffsschutz
#    - /swagger-ui.html
#    - /h2-console
#    - /graphiql
  # com.c4_soft.springaddons.security.oidc.starter.properties.CorsProperties
  # in com.c4-soft.springaddons:spring-addons-starter-oidc
  #cors:
  #  - path: /**
  #    allowed-origin-patterns: ["https://localhost:8080", "https://kunde:8080", "https://oauth.pstmn.io"]

# ==============================================================================
# S p r i n g
# ==============================================================================
server:
  compression:
    enabled: true
    mime-types: application/hal+json
    min-response-size: 2KB
  error.whitelabel.enabled: false
  # https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto.webserver.configure-ssl
  http2.enabled: true
  ssl.bundle: microservice
  shutdown: graceful

spring:
  application.name: kunde
  aop.proxy-target-class: false

  # ==============================================================================
  # D a t e n b a nk
  # ==============================================================================
  # https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.data
#  datasource:
#    username: Change Me! # als System-Property oder Umgebungsvariable
#    password: Change Me! # als System-Property oder Umgebungsvariable
#    url: Change Me! # als System-Property oder Umgebungsvariable
#  # https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.data-migration
#  flyway:
#    locations: classpath:db/migration/{vendor}
#    create-schemas: false
#  # https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.data
#  jpa:
#    #database-platform: POSTGRESQL
#    hibernate:
#      # https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#configurations-hbmddl
#      #ddl-auto: none
#      naming.physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
#    open-in-view: false
#    properties:
#      # https://docs.jboss.org/hibernate/orm/current/javadocs/org/hibernate/cfg/AvailableSettings.html
#      # https://docs.jboss.org/hibernate/orm/current/javadocs/org/hibernate/cfg/Environment.html
#      hibernate:
#        #default_schema: kunde
#        jdbc:
#          time_zone: Europe/Berlin
#          batch_versioned_data: true
#          # fuer Oracle: der Treiber teilt bei SELECT das Resultat in standardmaessig maximal 10 Datensaetze auf
#          #fetch_size: 10
#        order_inserts: true
#        order_updates: true
#        session.events.log.LOG_QUERIES_SLOWER_THAN_MS: 20
#        xml_mapping_enabled: false
#        #mapping.default_list_semantics: LIST
#      # https://stackoverflow.com/questions/31585698/spring-boot-jpa2-hibernate-enable-second-level-cache
#      # https://jakarta.ee/xml/ns/persistence
#      # https://jakarta.ee/xml/ns/persistence/persistence_3_1.xsd
#      jakarta.persistence:
#        sharedCache.mode: ENABLE_SELECTIVE
#        validation.mode: NONE

  # siehe org.springframework.boot.autoconfigure.jackson.JacksonProperties
  jackson.default-property-inclusion: non_null
  lifecycle.timeout-per-shutdown-phase: 3s

  # ==============================================================================
  # M a i l
  # ==============================================================================
#  mail:
#    host: smtp.acme.com
#    port: 25
#    #protocol: smtp
#    properties.mail:
#      debug: false
#      smtp:
#        auth: false
#        starttls.enable: false
    # Mailserver des IZ
    #host: smtp.h-ka.de
    #port: 23
    #username: nnvv0011
    #password: blabla
    # GMail
    #host: smtp.gmail.com
    #port: 587
    #properties.mail.smtp.starttls.enable: true

  main.lazy-initialization: true
  mvc.problemdetails.enabled: true

  # ==============================================================================
  # S e c u r i t y
  # ==============================================================================
  # https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/jwt.html
#  security.oauth2.resourceserver.jwt:
#    # "issuer-uri" ist Praefix fuer ".../.well-known/openid-configuration"
#    issuer-uri: ${app.keycloak.issuer-uri}
    #jws-algorithms: RS256

  # ==============================================================================
  # T L S
  # ==============================================================================
  # https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.ssl.pem
  # https://spring.io/blog/2023/06/07/securing-spring-boot-applications-with-ssl
  ssl.bundle.pem.microservice:
    # Ressourcen mit "classpath:..." sind nicht "watchable"
    #reload-on-update: true
    keystore:
      private-key: "classpath:private-key.pem"
      certificate: "classpath:certificate.crt"
    truststore:
      certificate: "classpath:certificate.crt"

  threads.virtual.enabled: true

# ==============================================================================
# A c t u a t o r
# ==============================================================================
management:
  endpoints.web.exposure.include: "*"
  #endpoint.shutdown.access: unrestricted
  # Trace every action
#  metrics.distribution.percentiles-histogram.http.server.requests: true
#  observations:
#    #enable.spring.security: false
#    # siehe /actuator/metrics/get-by-id
#    key-values.application: kunde

# ==============================================================================
# L o g g i n g
# ==============================================================================
logging:
  file:
    name: /tmp/application.log
  logback.rollingpolicy:
    file-name-pattern: ${LOGFILE}.%d{yyyy-MM-dd}.%i.gz
    max-file-size: 50MB
    max-history: 7
  pattern:
    console: "%clr(%date{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}){faint} %clr(%5level) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15thread]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %msg%n%wEx"
    file: "%date{yyyy-MM-dd'T'HH:mm:ss.SSSXXX} %5level ${PID:- } --- [%thread] %-40.40logger{39} : %m%n%wEx"
    # https://github.com/micrometer-metrics/micrometer-samples/blob/main/micrometer-samples-boot3-web/src/main/resources/application.properties
    # file: %5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
  threshold:
    console: info
    file: info
  level:
    org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener: warn
    org.springframework.security.core.userdetails.User: error
    io.micrometer.observation.contextpropagation.ObservationThreadLocalAccessor: error

# ==============================================================================
# E i g e n e   P r o p e r t i e s
# ==============================================================================
#app:
  # siehe Klasse KeycloakProps
#  keycloak:
#    client-id: spring-client
#    client-secret: Change Me! # als System-Property oder Umgebungsvariable
#    host: keycloak
#    port: 8080
#    # "issuer-uri" ist Praefix fuer ".../.well-known/openid-configuration"
#    issuer-uri: http://keycloak:8080/realms/spring

  #mail:
  #  from: Theo Test <theo@test.de>
  #  sales: Maxi Musterfrau <maxi.musterfrau@test.de>

---
# ==============================================================================
# K u b e r n e t e s
# ==============================================================================
# alternativ: azure_app_service, sap, nomad, heroku
# https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java
# https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/cloud/CloudPlatform.html
spring.config.activate.on-cloud-platform: kubernetes
management.endpoint.health:
  access: read_only
  probes.enabled: true
  show-details: always
spring.lifecycle.timeout-per-shutdown-phase: 30s

---
# ==============================================================================
# P r o f i l e   " d e v "
# ==============================================================================
spring:
  config.activate.on-profile: dev

  # ==============================================================================
  # D a t e n b a n k
  # ==============================================================================
#  datasource:
#    # https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#appendix.application-properties.data
#    # https://github.com/brettwooldridge/HikariCP#frequently-used
#    # https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
#    # https://stackoverflow.com/questions/51136693/how-to-check-hikaricp-connection-pooling-is-working-or-not-in-java
#    hikari:
#      connection-timeout: 10000 # Default: 30_000 = 30 Sekunden
#      idle-timeout: 120000 # Default: 600_000 = 10 Minuten
#      maximum-pool-size: 3 # Default: 10
#      minimum-idle: 1 # Default: maximumPoolSize

  devtools:
    #livereload.enabled: true
    restart:
      #enabled: true
      #poll-interval: 1s
      #quiet-period: 400ms
      trigger-file: .reloadtrigger

  # ==============================================================================
  # D o c k e r   C o m p o s e   b e i   G r a d l e   u n d   M a v e n
  # ==============================================================================
  # https://docs.spring.io/spring-boot/reference/features/dev-services.html
  # https://docs.spring.io/spring-boot/appendix/application-properties/index.html#appendix.application-properties.docker-compose
  # "gradle bootRun" mit Modul "org.springframework.boot:spring-boot-docker-compose"
  # "spring-boot:run" mit Artifakt "org.springframework.boot:spring-boot-docker-compose"
#  docker.compose.file: extras/compose/backend/compose.yml

  # ==============================================================================
  # G r a p h Q L
  # ==============================================================================
  #graphql:
  #  # Pfad fuer GraphiQL: /graphiql
  #  graphiql.enabled: true
  #  # Pfad für Schema: /graphql/schema
  #  schema.printer.enabled: true

  jackson.serialization.indent-output: true

  # ==============================================================================
  # D a t e n b a n k
  # ==============================================================================
#  jpa.properties:
#    # https://docs.jboss.org/hibernate/orm/current/javadocs/org/hibernate/cfg/AvailableSettings.html
#    # https://docs.jboss.org/hibernate/orm/current/javadocs/org/hibernate/cfg/Environment.html
#    hibernate:
#      connection.pool_size: 10
#      format_sql: true
#      highlight_sql: true
#      # https://docs.jboss.org/hibernate/orm/current/javadocs/org/hibernate/tool/schema/internal/script/MultiLineSqlScriptExtractor.html
#      #hbm2ddl.import_files_sql_extractor: org.hibernate.tool.schema.internal.script.MultiLineSqlScriptExtractor
#      use_sql_comments: true

  # ==============================================================================
  # M a i l
  # ==============================================================================
#  mail:
#    host: localhost
#    port: 8025

  # https://stackoverflow.com/questions/53723613/how-to-set-enableloggingrequestdetails-true-in-spring-boot#answer-62817587
  mvc.log-request-details: true
  output.ansi.enabled: always

management:
  # ==============================================================================
  # A c t u a t o r
  # ==============================================================================
  endpoint:
    health:
      access: read_only
      probes.enabled: true
      show-details: ALWAYS
    shutdown.access: unrestricted
  info.os.enabled: true

  # JEDER Request wird fuer Tracing aufgezeichnet (statt 10% der Requests):
  # https://springbootlearning.medium.com/using-micrometer-to-trace-your-spring-boot-app-1fe6ff9982ae
  #tracing.sampling.probability: 1

#server:
#  port: 8081

# ==============================================================================
# L o g g i n g
# ==============================================================================
logging:
  file.name: /tmp/application.log
  logback.rollingpolicy:
    file-name-pattern: ${logging.file.name}.%d{yyyy-MM-dd}.%i.gz
    max-file-size: 10MB
    max-history: 3
  pattern:
    # %thread protokolliert den Thread-Namen: leer bei Virtual Threads
    # https://stackoverflow.com/questions/61207226/logging-thread-id-instead-of-thread-name-using-logback
    console: "%clr(%date{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}){faint} %clr(%5level) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15thread]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %msg%n%wEx"
    file: "%date{yyyy-MM-dd'T'HH:mm:ss.SSSXXX} %5level ${PID:- } --- [%thread] %-40.40logger{39} : %m%n%wEx"
  threshold:
    console: trace
    file: trace
  level:
    com.acme: trace
    org.apache.catalina.authenticator.AuthenticatorBase: debug
    org.apache.catalina.loader.WebappClassLoaderBase: info
    org.springframework.boot.availability.ApplicationAvailabilityBean: debug
    org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener: warn
    # PersistenceUnit "default" fuer Jakarta Persistence
    #org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean: debug
    org.springframework.security.core.userdetails.User: error
    org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationProvider: debug
    org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager: debug
    org.springframework.security.web.server.authorization.AuthorizationWebFilter: trace
    org.springframework.security.web.FilterChainProxy: debug
    #org.springframework.security.web.FilterChainProxy: trace
    org.springframework.web.client.RestTemplate: debug
    org.springframework.web.reactive.function.client.ExchangeFunctions: trace
    org.springframework.web.service.invoker.PathVariableArgumentResolver: trace
    org.springframework.web.service.invoker.RequestHeaderArgumentResolver: trace
    org.springframework.web.servlet.DispatcherServlet: debug
    org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver: error
    org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor: debug
    org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: debug
    io.micrometer.observation.contextpropagation.ObservationThreadLocalAccessor: error

    # https://thorben-janssen.com/hibernate-logging-guide
    org.hibernate.SQL: debug
    org.hibernate.orm.jdbc.bind: debug
    #org.hibernate.orm.jdbc.bind: trace
    org.hibernate.SQL_SLOW: warn
    org.flywaydb.core.internal.sqlscript.DefaultSqlScriptExecutor: debug

    io.qameta.allure.AllureLifecycle: fatal
    org.junit.jupiter.engine.descriptor.TestInstanceLifecycleUtils: warn
    org.springframework.boot.test.context.SpringBootTestContextBootstrapper: warn
    org.springframework.test.context.support.AbstractContextLoader: warn
    org.springframework.test.context.support.AnnotationConfigContextLoaderUtils: warn
    org.springframework.test.context.support.DefaultTestContextBootstrapper: warn

---
# ==============================================================================
# P r o f i l e   " h t t p "
# ==============================================================================
spring:
  config.activate.on-profile: http

server:
  http2.enabled: false
  ssl.enabled: false

---
# ==============================================================================
# P r o f i l e   " n a t i v e "
# ==============================================================================
spring:
  config.activate.on-profile: native
  ssl.bundle.pem.microservice:
    keystore:
      private-key: ./private-key.pem
      certificate: ./certificate.crt
    truststore:
      certificate: ./certificate.crt
logging.file.name: ./application.log
